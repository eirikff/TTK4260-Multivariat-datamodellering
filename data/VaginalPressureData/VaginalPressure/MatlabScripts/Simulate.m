function [	afFatigued,						...
			afActive,						...
			afRested	]	=				...
				Simulate(					...
					tModel,					...
					fInitialFatigue,		...
					fInitialActive,			...
					abActivityZones			)
	%
	% storage allocation
	afFatigued	= zeros( size( abActivityZones ) );
	afActive	= zeros( size( abActivityZones ) );
	afRested	= zeros( size( abActivityZones ) );
	%
	% setting of the initial condition
	afFatigued(1)	= fInitialFatigue;
	afActive(1)		= fInitialActive;
	afRested(1)		= tModel.fTotalMuscularUnits - afFatigued(1) - afActive(1);
	%
	% simulate the system
	for iTime = 1:( numel( abActivityZones ) - 1 )
		%
		[	afFatigued(iTime + 1),			...
			afActive(iTime + 1),			...
			afRested(iTime + 1)		] =		...
				Predict(					...
					tModel,					...
					afFatigued(iTime),		...
					afActive(iTime),		...
					afRested(iTime),		...
					abActivityZones(iTime)	);
		%
	end;%
	%
end % function

